// Test script to verify Pinecone configuration with hosted embeddings
require('dotenv').config();

const PineconeSemanticService = require('../services/pineconeSemanticService');

async function testPineconeConfig() {
  console.log('üß™ Testing Pinecone Configuration with llama-text-embed-v2\n');

  // Check configuration
  console.log('üìã Configuration:');
  console.log(`  Model: llama-text-embed-v2`);
  console.log(`  Dimensions: 384`);
  console.log(`  Hosted Embeddings: Yes`);
  console.log(`  Index Name: card-rewards`);
  console.log('');

  // Check environment
  if (!process.env.PINECONE_API_KEY) {
    console.error('‚ùå PINECONE_API_KEY not found in environment');
    console.log('üí° Add PINECONE_API_KEY to your .env file');
    return;
  }

  console.log('‚úÖ PINECONE_API_KEY found');
  
  if (process.env.OPENAI_API_KEY) {
    console.log('‚úÖ OPENAI_API_KEY found (for fallback prompts)');
  } else {
    console.log('‚ö†Ô∏è  OPENAI_API_KEY not found (prompts disabled, semantic only)');
  }

  console.log('');

  const pineconeService = new PineconeSemanticService();

  try {
    console.log('üîß Initializing Pinecone service...');
    await pineconeService.initialize();
    console.log('‚úÖ Pinecone service initialized successfully');

    console.log('\nüìä Checking index stats...');
    const stats = await pineconeService.getIndexStats();
    
    if (stats) {
      console.log(`‚úÖ Index found:`);
      console.log(`  Total Vectors: ${stats.totalVectors}`);
      console.log(`  Dimension: ${stats.dimension}`);
      console.log(`  Index Fullness: ${(stats.indexFullness * 100).toFixed(2)}%`);
      
      if (stats.totalVectors === 0) {
        console.log('\n‚ö†Ô∏è  Index is empty. Run setup to populate training data:');
        console.log('   node scripts/setupPinecone.js');
      } else {
        console.log('\nüéØ Testing categorization...');
        await testCategorization(pineconeService);
      }
    } else {
      console.log('‚ùå Could not get index stats');
    }

  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
    
    if (error.message.includes('not found')) {
      console.log('\nüí° Index not found. Run setup to create it:');
      console.log('   node scripts/setupPinecone.js');
    } else if (error.message.includes('unauthorized')) {
      console.log('\nüí° Check your PINECONE_API_KEY');
    } else {
      console.log('\nüí° Full error details:', error);
    }
  }
}

async function testCategorization(pineconeService) {
  const testCases = [
    'fuel for my vehicle',
    'grabbing a bite to eat',
    'hotel reservation booking',
    'weekly grocery shopping'
  ];

  for (const testCase of testCases) {
    try {
      const result = await pineconeService.categorizeWithPinecone(testCase);
      const confidence = (result.confidence * 100).toFixed(1);
      
      console.log(`‚úì "${testCase}"`);
      console.log(`  ‚Üí ${result.category} (${confidence}% confidence)`);
      console.log(`  ‚Üí Source: ${result.source}`);
      
      if (result.details) {
        const topScore = (result.details.topScore * 100).toFixed(1);
        console.log(`  ‚Üí Top similarity: ${topScore}%`);
      }
      console.log('');
      
    } catch (error) {
      console.log(`‚úó "${testCase}" ‚Üí Error: ${error.message}`);
    }
  }
}

function showNextSteps() {
  console.log('\nüöÄ NEXT STEPS:');
  console.log('‚îÄ'.repeat(40));
  console.log('1. If index is empty: node scripts/setupPinecone.js');
  console.log('2. Test full API: node test/testRecommendationAPI.js');
  console.log('3. Start server: node index.js');
  console.log('4. Test categories: node test/semanticVsKeywordDemo.js');
  console.log('');
  console.log('üéØ CONFIGURATION SUMMARY:');
  console.log('‚îÄ'.repeat(40));
  console.log('‚úÖ Simplified architecture - only Pinecone needed');
  console.log('‚úÖ No OpenAI embedding costs');
  console.log('‚úÖ 384 dimensions for optimal performance');
  console.log('‚úÖ Fast hosted embeddings');
  console.log('‚úÖ Perfect for small projects');
}

if (require.main === module) {
  testPineconeConfig()
    .then(showNextSteps)
    .catch(console.error);
}

module.exports = { testPineconeConfig };